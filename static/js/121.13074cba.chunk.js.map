{"version":3,"file":"static/js/121.13074cba.chunk.js","mappings":"mTAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,oGACRF,EAAAA,GAAAA,IAAU,qBAAsB,CACrDG,OAAQ,CACNC,QAASH,KAHkB,cACzBI,EADyB,yBAMxBA,EAASC,MANe,2CAAH,qDASjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNR,EAAAA,GAAAA,IAAU,eAAgB,CAC/CG,OAAQ,CACNC,QAASH,EACTO,MAAAA,KAJyB,cACvBH,EADuB,yBAOtBA,EAASC,MAPa,2CAAH,sDAUfG,EAAe,mCAAG,WAAMC,GAAN,uFACNV,EAAAA,GAAAA,IAAA,gBAAmBU,GAAM,CAC9CP,OAAQ,CACNC,QAASH,KAHgB,cACvBI,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfK,EAAe,mCAAG,WAAMD,GAAN,uFACNV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,YAAiC,CACtDP,OAAQ,CACNC,QAASH,KAHgB,cACvBI,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfM,EAAe,mCAAG,WAAMF,GAAN,uFACNV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,YAAiC,CACtDP,OAAQ,CACNC,QAASH,KAHgB,cACvBI,EADuB,yBAMtBA,EAASC,MANa,2CAAH,qD,iJCxCfO,EAAcC,EAAAA,GAAAA,GAAH,gDAIXC,EAAQD,EAAAA,GAAAA,IAAH,gEAKLE,EAAOF,EAAAA,GAAAA,EAAH,mE,SCPJG,EAAW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,IAC1C,OACE,UAACP,EAAD,YACE,SAACE,EAAD,CACEK,IAAKA,EAAG,yCAAqCA,GAAQC,EACrDC,IAAKJ,KAEP,SAACF,EAAD,UAAOE,KACP,UAACF,EAAD,YACE,sCADF,IACqBG,OAI1B,E,wCC8BD,EAzCa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,oGAEbF,GAAa,GAFA,UAGQlB,EAAAA,EAAAA,IAAgBY,GAHxB,OAGPS,EAHO,OAIbL,EAAWK,EAAOC,MAJL,gDAMbC,QAAQC,IAAI,QAAZ,MANa,yBAQbN,GAAa,GARA,4EAAH,qDAWdE,GACD,GAAE,CAACR,IAEAK,GAAkB,SAACQ,EAAA,EAAD,IACjBV,GAGH,0BACE,wBACGA,EAAQW,KAAI,YAA4C,IAAzC3B,EAAwC,EAAxCA,GAAIQ,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWmB,EAAmB,EAAnBA,aACnC,OACE,SAACrB,EAAD,CAEEC,KAAMA,EACNC,UAAWA,EACXC,IAAKkB,GAHA5B,EAMV,QAdc,IAkBtB,C","sources":["data/moviesAPI.jsx","components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '8c12f36de4e4777f33205f9eb618cf01';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchMovies = async query => {\n  const response = await axios.get('search/movie', {\n    params: {\n      api_key: KEY,\n      query,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const CastItemBox = styled.li`\n  margin-bottom: 10px;\n`;\n\nexport const Image = styled.img`\n  width: 200px;\n  margin-bottom: 5px;\n`;\n\nexport const Text = styled.p`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport image from '../../images/images.jpeg';\nimport { CastItemBox, Image, Text } from './CastItem.styled';\n\nexport const CastItem = ({ name, character, src }) => {\n  return (\n    <CastItemBox>\n      <Image\n        src={src ? `https://image.tmdb.org/t/p/w200${src}` : image}\n        alt={name}\n      />\n      <Text>{name}</Text>\n      <Text>\n        <b>Character:</b> {character}\n      </Text>\n    </CastItemBox>\n  );\n};\n\nCastItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  src: PropTypes.string.isRequired,\n};\n","import { CastItem } from 'components/CastItem/CastItem';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../data/moviesAPI';\nimport { Loader } from '../../components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fechData = async () => {\n      try {\n        setIsLoading(true);\n        const result = await getMovieCredits(movieId);\n        setCredits(result.cast);\n      } catch (error) {\n        console.log('error', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fechData();\n  }, [movieId]);\n\n  if (isLoading) return <Loader />;\n  if (!credits) return null;\n\n  return (\n    <div>\n      <ul>\n        {credits.map(({ id, name, character, profile_path }) => {\n          return (\n            <CastItem\n              key={id}\n              name={name}\n              character={character}\n              src={profile_path}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","KEY","getTrendingMovies","params","api_key","response","data","getSearchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","CastItemBox","styled","Image","Text","CastItem","name","character","src","image","alt","movieId","useParams","useState","credits","setCredits","isLoading","setIsLoading","useEffect","fechData","result","cast","console","log","Loader","map","profile_path"],"sourceRoot":""}