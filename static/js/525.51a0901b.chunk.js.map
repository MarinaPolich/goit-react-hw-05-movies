{"version":3,"file":"static/js/525.51a0901b.chunk.js","mappings":"mTAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,oGACRF,EAAAA,GAAAA,IAAU,qBAAsB,CACrDG,OAAQ,CACNC,QAASH,KAHkB,cACzBI,EADyB,yBAMxBA,EAASC,MANe,2CAAH,qDASjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNR,EAAAA,GAAAA,IAAU,eAAgB,CAC/CG,OAAQ,CACNC,QAASH,EACTO,MAAAA,KAJyB,cACvBH,EADuB,yBAOtBA,EAASC,MAPa,2CAAH,sDAUfG,EAAe,mCAAG,WAAMC,GAAN,uFACNV,EAAAA,GAAAA,IAAA,gBAAmBU,GAAM,CAC9CP,OAAQ,CACNC,QAASH,KAHgB,cACvBI,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfK,EAAe,mCAAG,WAAMD,GAAN,uFACNV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,YAAiC,CACtDP,OAAQ,CACNC,QAASH,KAHgB,cACvBI,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfM,EAAe,mCAAG,WAAMF,GAAN,uFACNV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,YAAiC,CACtDP,OAAQ,CACNC,QAASH,KAHgB,cACvBI,EADuB,yBAMtBA,EAASC,MANa,2CAAH,qD,qKCxCfO,EAAgBC,EAAAA,GAAAA,GAAH,gDAGbC,EAAQD,EAAAA,GAAAA,GAAH,oEAKLE,EAAOF,EAAAA,GAAAA,EAAH,4C,SCPJG,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnC,OACE,UAACN,EAAD,YACE,UAACE,EAAD,sBAAgBG,MAChB,SAACF,EAAD,UAAOG,MAGZ,E,UC+BD,EAnCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,oGAEbF,GAAa,GAFA,UAGQd,EAAAA,EAAAA,IAAgBQ,GAHxB,OAGPS,EAHO,OAIbL,EAAWK,EAAOC,SAJL,gDAMbC,QAAQC,IAAI,QAAZ,MANa,yBAQbN,GAAa,GARA,4EAAH,qDAWdE,GACD,GAAE,CAACR,IAEAK,GAAkB,SAACQ,EAAA,EAAD,IACjBV,GAA8B,IAAnBA,EAAQW,QAItB,0BACE,wBACGX,EAAQY,KAAI,YAA8B,IAA3BzB,EAA0B,EAA1BA,GAAIQ,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OAAO,SAACF,EAAD,CAAqBC,OAAQA,EAAQC,QAASA,GAA7BT,EACzB,SAPE,oEAWV,C","sources":["data/moviesAPI.jsx","components/ReviewItem/ReviewItem.styled.js","components/ReviewItem/ReviewItem.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '8c12f36de4e4777f33205f9eb618cf01';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchMovies = async query => {\n  const response = await axios.get('search/movie', {\n    params: {\n      api_key: KEY,\n      query,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const ReviewItemBox = styled.li`\n  margin-bottom: 15px;\n`;\nexport const Title = styled.h3`\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n  font-size: 12px;\n`;\n","import PropTypes from 'prop-types';\nimport { ReviewItemBox, Title, Text } from './ReviewItem.styled';\n\nexport const ReviewItem = ({ author, content }) => {\n  return (\n    <ReviewItemBox>\n      <Title>Author: {author}</Title>\n      <Text>{content}</Text>\n    </ReviewItemBox>\n  );\n};\n\nReviewItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../data/moviesAPI';\nimport { ReviewItem } from 'components/ReviewItem/ReviewItem';\nimport { Loader } from '../../components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fechData = async () => {\n      try {\n        setIsLoading(true);\n        const result = await getMovieReviews(movieId);\n        setReviews(result.results);\n      } catch (error) {\n        console.log('error', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fechData();\n  }, [movieId]);\n\n  if (isLoading) return <Loader />;\n  if (!reviews || reviews.length === 0)\n    return <p>We don't have any reviews for this movie.</p>;\n\n  return (\n    <div>\n      <ul>\n        {reviews.map(({ id, author, content }) => {\n          return <ReviewItem key={id} author={author} content={content} />;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","KEY","getTrendingMovies","params","api_key","response","data","getSearchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","ReviewItemBox","styled","Title","Text","ReviewItem","author","content","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fechData","result","results","console","log","Loader","length","map"],"sourceRoot":""}